import { useEffect, useState } from 'react'
import { redirect, BrowserRouter, Routes, Route } from 'react-router-dom';
import Header from './components/header'
import AddEvent from './components/create'
import Events from './components/events'
import Login from './login';
import './App.css'
import dayjs from 'dayjs'
import { unstable_composeClasses } from '@mui/material';

// create event class, with the following attributes:
//  id(str): a unique id for the event, generated by uuid
//  title(str): the title of the event
//  dateAndTime(dayJs object): date and time of the event
//  icon(str): file path to the event's corresponsing icon
//  color(hex id(str)): the associated event collor
//  recurring: optional parameter to define a recurring event
class Event {

  // object definition
  constructor(id, title, dateAndTime, icon, color, recurring = false) {
    this._id = id;
    this._title = title;
    this._dateAndTime = dateAndTime;
    this._icon = icon;
    this._color = color;
    this._recurring = recurring;
  }

  // getters and setters
  get id() {
    return this._id;
  }

  set id(newId) {
    this._id = newId;
  }

  get title() {
    return this._title;
  }

  set title(newTitle) {
    this._title = newTitle;
  }

  get dateAndTime() {
    return this._dateAndTime;
  }

  set dateAndTime(newDateAndTime) {
    this._dateAndTime = newDateAndTime;
  }

  get icon() {
    return this._icon;
  }

  set icon(newIcon) {
    this._icon = newIcon;
  }

  get color() {
    return this._color;
  }

  set color(newColor) {
    this._color = newColor;
  }
}

// use strategy design pattern to define event creation, can be default or recurring
class EventCreationStrategy {
  createEvent(id, title, dateAndTime, icon, color) {
    throw new Error("cannot call base creation strategy");
  }
}

class DefaultStrategy extends EventCreationStrategy {
  createEvent(id, title, dateAndTime, icon, color) {
    return new Event(id, title, dateAndTime, icon, color);
  }
}

class RecurringStrategy extends EventCreationStrategy {
  createEvent(id, title, dateAndTime, icon, color) {
    return new Event(id, title, dateAndTime, icon, color, true);
  }
}

// create dummy events for demo purposes
const setupInitialEvents = () => {

  // init default constructor
  let constructor = new DefaultStrategy

  // create and return initial events
  const initialEvents = [
    constructor.createEvent("1", "Eat", dayjs(new Date(2023, 12, 24)), "/assets/images/login.png", "#0073e6"),
    constructor.createEvent("2", "Sleep", dayjs(new Date(2023, 11, 16)), "/assets/images/register.png", "#9b8bf4"),
  ]

  return initialEvents
}

// define main app function
function App() {
  // this useState dynamically updates our list of events
  // when a new event is added
  const [events, setEvents] = useState(setupInitialEvents());
  const [loggedIn, setLoggedIn] = useState(false);
  

  // class for functions that change (add/edit/delete) events, triggerring a rerender.  
  // follows a Singleton design pattern.
  class EventsController {
    // used to ensure only one instance exists, ensuring Singleton
    static single_instance = null

    // setup strategies for event creation
    constructDefault = new DefaultStrategy();
    constructRecurring = new RecurringStrategy()

    // only contstruct if this is the first instance
    constructor() {
      if(EventsController.single_instance) {
        return EventsController.single_instance
      }

      EventsController.single_instance = this;

      this.addEvent = this.addEvent.bind(this); 
    }

    // create an event, implement default and recurring strategy
    generateDefaultEvent(event_data) {
      return this.constructDefault.createEvent(event_data.id, event_data.title, event_data.dateAndTime, event_data.icon, event_data.color)
    }

    generateRecurringEvent(event_data) {
      return this.constructRecurring.createEvent(event_data.id, event_data.title, event_data.dateAndTime, event_data.icon, event_data.color)
    }
    
    // accepts an event object id, deleting it
    deleteEvent = (targetId) => {

      // filter out the targeted event from the events list
      setEvents(events.filter((event) => event.id !== targetId));
    };
    
    // accepts an event object with the same id as an existing event, editing
    // the existing event
    editEvent = (updatedEvent) => {
      // find the already existing event
      const index = events.findIndex((event) => event.id === updatedEvent.id);
      
      // if the event exists, replace it in a new events list
      if (index !== -1) {
         const newEvents = [...events];
         newEvents[index] = updatedEvent;
         setEvents(newEvents);
      }
    };

    // accepts a new event object, along with to option to make it recurring.
    // adds the new event to the event list
    addEvent(newEvent, recurring = false) {
       const oldEvents = [...events];

       if (recurring) {
          oldEvents.push(this.generateRecurringEvent(newEvent))
       }

       else {
          oldEvents.push(this.generateDefaultEvent(newEvent));
       }

       setEvents(oldEvents);
    }

    
  }

  // record successful login
  useEffect(() => {
    console.log(loggedIn);
  }, [loggedIn])


  // instantiate single event controller
  const eventController = new EventsController()
  
  // display app if user is logged in
  if (loggedIn) {
    // main display
    return (
      <div className='appContainer'>
        <Header />
        {/* Button for adding events */}
        <AddEvent addEventFunction={eventController.addEvent} />
        {/* Full events display */}
        <Events events={events} eventController={eventController}/>
      </div>
    )

  } 
  
  // user not logged in, display login
  else {
    return <Login loggedIn={loggedIn} setLoggedIn={setLoggedIn} />
  }

}

export default App
